// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String     @id @default(uuid()) @postgresql.Uuid
  name                    String     @default("")
  email                   String     @unique @default("")
  password                String?
  cart                    CartItem[] @relation("CartItem_user")
  orders                  Order[]    @relation("Order_user")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
}

model Product {
  id                    String         @id @default(uuid()) @postgresql.Uuid
  name                  String         @default("")
  description           String         @default("")
  image                 ProductImage[] @relation("Product_image")
  status                String?        @default("DRAFT")
  price                 Int?
  cart                  CartItem?      @relation("Product_cart", fields: [cartId], references: [id])
  cartId                String?        @map("cart") @postgresql.Uuid
  from_CartItem_product CartItem[]     @relation("CartItem_product")

  @@index([cartId])
}

model ProductImage {
  id                      String         @id @default(uuid()) @postgresql.Uuid
  image                   Json?
  altText                 String         @default("")
  product                 Product[]      @relation("Product_image")
  from_OrderProduct_image OrderProduct[] @relation("OrderProduct_image")
}

model CartItem {
  id                String    @id @default(uuid()) @postgresql.Uuid
  user              User?     @relation("CartItem_user", fields: [userId], references: [id])
  userId            String?   @map("user") @postgresql.Uuid
  product           Product?  @relation("CartItem_product", fields: [productId], references: [id])
  productId         String?   @map("product") @postgresql.Uuid
  quantity          Int       @default(1)
  from_Product_cart Product[] @relation("Product_cart")

  @@index([userId])
  @@index([productId])
}

model OrderProduct {
  id          String         @id @default(uuid()) @postgresql.Uuid
  name        String         @default("")
  description String         @default("")
  image       ProductImage[] @relation("OrderProduct_image")
  price       Int?
  quantity    Int?
  order       Order?         @relation("OrderProduct_order", fields: [orderId], references: [id])
  orderId     String?        @map("order") @postgresql.Uuid

  @@index([orderId])
}

model Order {
  id        String         @id @default(uuid()) @postgresql.Uuid
  total     Int?
  products  OrderProduct[] @relation("OrderProduct_order")
  user      User?          @relation("Order_user", fields: [userId], references: [id])
  userId    String?        @map("user") @postgresql.Uuid
  charge    String         @unique @default("")
  brand     String         @default("")
  last4     String         @default("")
  exp       String         @default("")
  createdAt DateTime?

  @@index([userId])
}